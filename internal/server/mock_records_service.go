// Code generated by MockGen. DO NOT EDIT.
// Source: internal/models/records.go

// Package server is a generated GoMock package.
package server

import (
	context "context"
	reflect "reflect"

	models "github.com/ArtemShalinFe/gophkeeper/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockVector is a mock of Vector interface.
type MockVector struct {
	ctrl     *gomock.Controller
	recorder *MockVectorMockRecorder
}

// MockVectorMockRecorder is the mock recorder for MockVector.
type MockVectorMockRecorder struct {
	mock *MockVector
}

// NewMockVector creates a new mock instance.
func NewMockVector(ctrl *gomock.Controller) *MockVector {
	mock := &MockVector{ctrl: ctrl}
	mock.recorder = &MockVectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVector) EXPECT() *MockVectorMockRecorder {
	return m.recorder
}

// Clone mocks base method.
func (m *MockVector) Clone() []*models.Record {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone")
	ret0, _ := ret[0].([]*models.Record)
	return ret0
}

// Clone indicates an expected call of Clone.
func (mr *MockVectorMockRecorder) Clone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockVector)(nil).Clone))
}

// Increment mocks base method.
func (m *MockVector) Increment(arg0 *models.Record) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Increment", arg0)
}

// Increment indicates an expected call of Increment.
func (mr *MockVectorMockRecorder) Increment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Increment", reflect.TypeOf((*MockVector)(nil).Increment), arg0)
}

// IsHigher mocks base method.
func (m *MockVector) IsHigher(arg0 *models.Record) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsHigher", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsHigher indicates an expected call of IsHigher.
func (mr *MockVectorMockRecorder) IsHigher(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsHigher", reflect.TypeOf((*MockVector)(nil).IsHigher), arg0)
}

// IsLower mocks base method.
func (m *MockVector) IsLower(arg0 *models.Record) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsLower", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsLower indicates an expected call of IsLower.
func (mr *MockVectorMockRecorder) IsLower(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLower", reflect.TypeOf((*MockVector)(nil).IsLower), arg0)
}

// IsSame mocks base method.
func (m *MockVector) IsSame(arg0 *models.Record) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSame", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSame indicates an expected call of IsSame.
func (mr *MockVectorMockRecorder) IsSame(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSame", reflect.TypeOf((*MockVector)(nil).IsSame), arg0)
}

// MockRecordStorage is a mock of RecordStorage interface.
type MockRecordStorage struct {
	ctrl     *gomock.Controller
	recorder *MockRecordStorageMockRecorder
}

// MockRecordStorageMockRecorder is the mock recorder for MockRecordStorage.
type MockRecordStorageMockRecorder struct {
	mock *MockRecordStorage
}

// NewMockRecordStorage creates a new mock instance.
func NewMockRecordStorage(ctrl *gomock.Controller) *MockRecordStorage {
	mock := &MockRecordStorage{ctrl: ctrl}
	mock.recorder = &MockRecordStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRecordStorage) EXPECT() *MockRecordStorageMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockRecordStorage) Add(ctx context.Context, userID string, record *models.RecordDTO) (*models.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, userID, record)
	ret0, _ := ret[0].(*models.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockRecordStorageMockRecorder) Add(ctx, userID, record interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockRecordStorage)(nil).Add), ctx, userID, record)
}

// Delete mocks base method.
func (m *MockRecordStorage) Delete(ctx context.Context, userID, recordID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, userID, recordID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRecordStorageMockRecorder) Delete(ctx, userID, recordID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRecordStorage)(nil).Delete), ctx, userID, recordID)
}

// Get mocks base method.
func (m *MockRecordStorage) Get(ctx context.Context, userID, recordID string) (*models.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, userID, recordID)
	ret0, _ := ret[0].(*models.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRecordStorageMockRecorder) Get(ctx, userID, recordID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRecordStorage)(nil).Get), ctx, userID, recordID)
}

// List mocks base method.
func (m *MockRecordStorage) List(ctx context.Context, userID string) ([]*models.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, userID)
	ret0, _ := ret[0].([]*models.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockRecordStorageMockRecorder) List(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRecordStorage)(nil).List), ctx, userID)
}

// Update mocks base method.
func (m *MockRecordStorage) Update(ctx context.Context, userID string, record *models.Record) (*models.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, userID, record)
	ret0, _ := ret[0].(*models.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockRecordStorageMockRecorder) Update(ctx, userID, record interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRecordStorage)(nil).Update), ctx, userID, record)
}
