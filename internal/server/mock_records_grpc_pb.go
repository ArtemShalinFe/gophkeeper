// Code generated by MockGen. DO NOT EDIT.
// Source: internal/server/records_grpc.pb.go

// Package server is a generated GoMock package.
package server

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockRecordsClient is a mock of RecordsClient interface.
type MockRecordsClient struct {
	ctrl     *gomock.Controller
	recorder *MockRecordsClientMockRecorder
}

// MockRecordsClientMockRecorder is the mock recorder for MockRecordsClient.
type MockRecordsClientMockRecorder struct {
	mock *MockRecordsClient
}

// NewMockRecordsClient creates a new mock instance.
func NewMockRecordsClient(ctrl *gomock.Controller) *MockRecordsClient {
	mock := &MockRecordsClient{ctrl: ctrl}
	mock.recorder = &MockRecordsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRecordsClient) EXPECT() *MockRecordsClientMockRecorder {
	return m.recorder
}

// AddRecord mocks base method.
func (m *MockRecordsClient) AddRecord(ctx context.Context, in *AddRecordRequest, opts ...grpc.CallOption) (*AddRecordResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddRecord", varargs...)
	ret0, _ := ret[0].(*AddRecordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddRecord indicates an expected call of AddRecord.
func (mr *MockRecordsClientMockRecorder) AddRecord(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRecord", reflect.TypeOf((*MockRecordsClient)(nil).AddRecord), varargs...)
}

// DeleteRecord mocks base method.
func (m *MockRecordsClient) DeleteRecord(ctx context.Context, in *DeleteRecordRequest, opts ...grpc.CallOption) (*DeleteRecordResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteRecord", varargs...)
	ret0, _ := ret[0].(*DeleteRecordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRecord indicates an expected call of DeleteRecord.
func (mr *MockRecordsClientMockRecorder) DeleteRecord(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRecord", reflect.TypeOf((*MockRecordsClient)(nil).DeleteRecord), varargs...)
}

// GetRecord mocks base method.
func (m *MockRecordsClient) GetRecord(ctx context.Context, in *GetRecordRequest, opts ...grpc.CallOption) (*GetRecordResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRecord", varargs...)
	ret0, _ := ret[0].(*GetRecordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecord indicates an expected call of GetRecord.
func (mr *MockRecordsClientMockRecorder) GetRecord(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecord", reflect.TypeOf((*MockRecordsClient)(nil).GetRecord), varargs...)
}

// ListRecords mocks base method.
func (m *MockRecordsClient) ListRecords(ctx context.Context, in *ListRecordRequest, opts ...grpc.CallOption) (*ListRecordResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRecords", varargs...)
	ret0, _ := ret[0].(*ListRecordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRecords indicates an expected call of ListRecords.
func (mr *MockRecordsClientMockRecorder) ListRecords(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecords", reflect.TypeOf((*MockRecordsClient)(nil).ListRecords), varargs...)
}

// UpdateRecord mocks base method.
func (m *MockRecordsClient) UpdateRecord(ctx context.Context, in *UpdateRecordRequest, opts ...grpc.CallOption) (*UpdateRecordResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateRecord", varargs...)
	ret0, _ := ret[0].(*UpdateRecordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRecord indicates an expected call of UpdateRecord.
func (mr *MockRecordsClientMockRecorder) UpdateRecord(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRecord", reflect.TypeOf((*MockRecordsClient)(nil).UpdateRecord), varargs...)
}

// MockRecordsServer is a mock of RecordsServer interface.
type MockRecordsServer struct {
	ctrl     *gomock.Controller
	recorder *MockRecordsServerMockRecorder
}

// MockRecordsServerMockRecorder is the mock recorder for MockRecordsServer.
type MockRecordsServerMockRecorder struct {
	mock *MockRecordsServer
}

// NewMockRecordsServer creates a new mock instance.
func NewMockRecordsServer(ctrl *gomock.Controller) *MockRecordsServer {
	mock := &MockRecordsServer{ctrl: ctrl}
	mock.recorder = &MockRecordsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRecordsServer) EXPECT() *MockRecordsServerMockRecorder {
	return m.recorder
}

// AddRecord mocks base method.
func (m *MockRecordsServer) AddRecord(arg0 context.Context, arg1 *AddRecordRequest) (*AddRecordResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRecord", arg0, arg1)
	ret0, _ := ret[0].(*AddRecordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddRecord indicates an expected call of AddRecord.
func (mr *MockRecordsServerMockRecorder) AddRecord(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRecord", reflect.TypeOf((*MockRecordsServer)(nil).AddRecord), arg0, arg1)
}

// DeleteRecord mocks base method.
func (m *MockRecordsServer) DeleteRecord(arg0 context.Context, arg1 *DeleteRecordRequest) (*DeleteRecordResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRecord", arg0, arg1)
	ret0, _ := ret[0].(*DeleteRecordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRecord indicates an expected call of DeleteRecord.
func (mr *MockRecordsServerMockRecorder) DeleteRecord(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRecord", reflect.TypeOf((*MockRecordsServer)(nil).DeleteRecord), arg0, arg1)
}

// GetRecord mocks base method.
func (m *MockRecordsServer) GetRecord(arg0 context.Context, arg1 *GetRecordRequest) (*GetRecordResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecord", arg0, arg1)
	ret0, _ := ret[0].(*GetRecordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecord indicates an expected call of GetRecord.
func (mr *MockRecordsServerMockRecorder) GetRecord(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecord", reflect.TypeOf((*MockRecordsServer)(nil).GetRecord), arg0, arg1)
}

// ListRecords mocks base method.
func (m *MockRecordsServer) ListRecords(arg0 context.Context, arg1 *ListRecordRequest) (*ListRecordResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecords", arg0, arg1)
	ret0, _ := ret[0].(*ListRecordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRecords indicates an expected call of ListRecords.
func (mr *MockRecordsServerMockRecorder) ListRecords(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecords", reflect.TypeOf((*MockRecordsServer)(nil).ListRecords), arg0, arg1)
}

// UpdateRecord mocks base method.
func (m *MockRecordsServer) UpdateRecord(arg0 context.Context, arg1 *UpdateRecordRequest) (*UpdateRecordResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRecord", arg0, arg1)
	ret0, _ := ret[0].(*UpdateRecordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRecord indicates an expected call of UpdateRecord.
func (mr *MockRecordsServerMockRecorder) UpdateRecord(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRecord", reflect.TypeOf((*MockRecordsServer)(nil).UpdateRecord), arg0, arg1)
}

// mustEmbedUnimplementedRecordsServer mocks base method.
func (m *MockRecordsServer) mustEmbedUnimplementedRecordsServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedRecordsServer")
}

// mustEmbedUnimplementedRecordsServer indicates an expected call of mustEmbedUnimplementedRecordsServer.
func (mr *MockRecordsServerMockRecorder) mustEmbedUnimplementedRecordsServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedRecordsServer", reflect.TypeOf((*MockRecordsServer)(nil).mustEmbedUnimplementedRecordsServer))
}

// MockUnsafeRecordsServer is a mock of UnsafeRecordsServer interface.
type MockUnsafeRecordsServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeRecordsServerMockRecorder
}

// MockUnsafeRecordsServerMockRecorder is the mock recorder for MockUnsafeRecordsServer.
type MockUnsafeRecordsServerMockRecorder struct {
	mock *MockUnsafeRecordsServer
}

// NewMockUnsafeRecordsServer creates a new mock instance.
func NewMockUnsafeRecordsServer(ctrl *gomock.Controller) *MockUnsafeRecordsServer {
	mock := &MockUnsafeRecordsServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeRecordsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeRecordsServer) EXPECT() *MockUnsafeRecordsServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedRecordsServer mocks base method.
func (m *MockUnsafeRecordsServer) mustEmbedUnimplementedRecordsServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedRecordsServer")
}

// mustEmbedUnimplementedRecordsServer indicates an expected call of mustEmbedUnimplementedRecordsServer.
func (mr *MockUnsafeRecordsServerMockRecorder) mustEmbedUnimplementedRecordsServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedRecordsServer", reflect.TypeOf((*MockUnsafeRecordsServer)(nil).mustEmbedUnimplementedRecordsServer))
}
