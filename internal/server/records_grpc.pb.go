// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: records.proto

package server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Records_Add_FullMethodName    = "/gophkeeper.Records/Add"
	Records_Update_FullMethodName = "/gophkeeper.Records/Update"
	Records_Get_FullMethodName    = "/gophkeeper.Records/Get"
	Records_Delete_FullMethodName = "/gophkeeper.Records/Delete"
)

// RecordsClient is the client API for Records service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecordsClient interface {
	Add(ctx context.Context, opts ...grpc.CallOption) (Records_AddClient, error)
	Update(ctx context.Context, opts ...grpc.CallOption) (Records_UpdateClient, error)
	Get(ctx context.Context, in *GetRecordRequest, opts ...grpc.CallOption) (Records_GetClient, error)
	Delete(ctx context.Context, in *DeleteRecordRequest, opts ...grpc.CallOption) (*DeleteRecordResponse, error)
}

type recordsClient struct {
	cc grpc.ClientConnInterface
}

func NewRecordsClient(cc grpc.ClientConnInterface) RecordsClient {
	return &recordsClient{cc}
}

func (c *recordsClient) Add(ctx context.Context, opts ...grpc.CallOption) (Records_AddClient, error) {
	stream, err := c.cc.NewStream(ctx, &Records_ServiceDesc.Streams[0], Records_Add_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &recordsAddClient{stream}
	return x, nil
}

type Records_AddClient interface {
	Send(*AddRecordRequest) error
	CloseAndRecv() (*AddRecordResponse, error)
	grpc.ClientStream
}

type recordsAddClient struct {
	grpc.ClientStream
}

func (x *recordsAddClient) Send(m *AddRecordRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *recordsAddClient) CloseAndRecv() (*AddRecordResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AddRecordResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *recordsClient) Update(ctx context.Context, opts ...grpc.CallOption) (Records_UpdateClient, error) {
	stream, err := c.cc.NewStream(ctx, &Records_ServiceDesc.Streams[1], Records_Update_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &recordsUpdateClient{stream}
	return x, nil
}

type Records_UpdateClient interface {
	Send(*UpdateRecordRequest) error
	CloseAndRecv() (*UpdateRecordResponse, error)
	grpc.ClientStream
}

type recordsUpdateClient struct {
	grpc.ClientStream
}

func (x *recordsUpdateClient) Send(m *UpdateRecordRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *recordsUpdateClient) CloseAndRecv() (*UpdateRecordResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UpdateRecordResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *recordsClient) Get(ctx context.Context, in *GetRecordRequest, opts ...grpc.CallOption) (Records_GetClient, error) {
	stream, err := c.cc.NewStream(ctx, &Records_ServiceDesc.Streams[2], Records_Get_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &recordsGetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Records_GetClient interface {
	Recv() (*GetRecordResponse, error)
	grpc.ClientStream
}

type recordsGetClient struct {
	grpc.ClientStream
}

func (x *recordsGetClient) Recv() (*GetRecordResponse, error) {
	m := new(GetRecordResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *recordsClient) Delete(ctx context.Context, in *DeleteRecordRequest, opts ...grpc.CallOption) (*DeleteRecordResponse, error) {
	out := new(DeleteRecordResponse)
	err := c.cc.Invoke(ctx, Records_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecordsServer is the server API for Records service.
// All implementations must embed UnimplementedRecordsServer
// for forward compatibility
type RecordsServer interface {
	Add(Records_AddServer) error
	Update(Records_UpdateServer) error
	Get(*GetRecordRequest, Records_GetServer) error
	Delete(context.Context, *DeleteRecordRequest) (*DeleteRecordResponse, error)
	mustEmbedUnimplementedRecordsServer()
}

// UnimplementedRecordsServer must be embedded to have forward compatible implementations.
type UnimplementedRecordsServer struct {
}

func (UnimplementedRecordsServer) Add(Records_AddServer) error {
	return status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedRecordsServer) Update(Records_UpdateServer) error {
	return status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedRecordsServer) Get(*GetRecordRequest, Records_GetServer) error {
	return status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedRecordsServer) Delete(context.Context, *DeleteRecordRequest) (*DeleteRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedRecordsServer) mustEmbedUnimplementedRecordsServer() {}

// UnsafeRecordsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecordsServer will
// result in compilation errors.
type UnsafeRecordsServer interface {
	mustEmbedUnimplementedRecordsServer()
}

func RegisterRecordsServer(s grpc.ServiceRegistrar, srv RecordsServer) {
	s.RegisterService(&Records_ServiceDesc, srv)
}

func _Records_Add_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RecordsServer).Add(&recordsAddServer{stream})
}

type Records_AddServer interface {
	SendAndClose(*AddRecordResponse) error
	Recv() (*AddRecordRequest, error)
	grpc.ServerStream
}

type recordsAddServer struct {
	grpc.ServerStream
}

func (x *recordsAddServer) SendAndClose(m *AddRecordResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *recordsAddServer) Recv() (*AddRecordRequest, error) {
	m := new(AddRecordRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Records_Update_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RecordsServer).Update(&recordsUpdateServer{stream})
}

type Records_UpdateServer interface {
	SendAndClose(*UpdateRecordResponse) error
	Recv() (*UpdateRecordRequest, error)
	grpc.ServerStream
}

type recordsUpdateServer struct {
	grpc.ServerStream
}

func (x *recordsUpdateServer) SendAndClose(m *UpdateRecordResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *recordsUpdateServer) Recv() (*UpdateRecordRequest, error) {
	m := new(UpdateRecordRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Records_Get_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetRecordRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RecordsServer).Get(m, &recordsGetServer{stream})
}

type Records_GetServer interface {
	Send(*GetRecordResponse) error
	grpc.ServerStream
}

type recordsGetServer struct {
	grpc.ServerStream
}

func (x *recordsGetServer) Send(m *GetRecordResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Records_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Records_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordsServer).Delete(ctx, req.(*DeleteRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Records_ServiceDesc is the grpc.ServiceDesc for Records service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Records_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gophkeeper.Records",
	HandlerType: (*RecordsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Delete",
			Handler:    _Records_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Add",
			Handler:       _Records_Add_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Update",
			Handler:       _Records_Update_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Get",
			Handler:       _Records_Get_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "records.proto",
}

const (
	Sync_Sync_FullMethodName = "/gophkeeper.Sync/Sync"
)

// SyncClient is the client API for Sync service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SyncClient interface {
	Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncResponse, error)
}

type syncClient struct {
	cc grpc.ClientConnInterface
}

func NewSyncClient(cc grpc.ClientConnInterface) SyncClient {
	return &syncClient{cc}
}

func (c *syncClient) Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncResponse, error) {
	out := new(SyncResponse)
	err := c.cc.Invoke(ctx, Sync_Sync_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SyncServer is the server API for Sync service.
// All implementations must embed UnimplementedSyncServer
// for forward compatibility
type SyncServer interface {
	Sync(context.Context, *SyncRequest) (*SyncResponse, error)
	mustEmbedUnimplementedSyncServer()
}

// UnimplementedSyncServer must be embedded to have forward compatible implementations.
type UnimplementedSyncServer struct {
}

func (UnimplementedSyncServer) Sync(context.Context, *SyncRequest) (*SyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (UnimplementedSyncServer) mustEmbedUnimplementedSyncServer() {}

// UnsafeSyncServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SyncServer will
// result in compilation errors.
type UnsafeSyncServer interface {
	mustEmbedUnimplementedSyncServer()
}

func RegisterSyncServer(s grpc.ServiceRegistrar, srv SyncServer) {
	s.RegisterService(&Sync_ServiceDesc, srv)
}

func _Sync_Sync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncServer).Sync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Sync_Sync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncServer).Sync(ctx, req.(*SyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Sync_ServiceDesc is the grpc.ServiceDesc for Sync service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sync_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gophkeeper.Sync",
	HandlerType: (*SyncServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sync",
			Handler:    _Sync_Sync_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "records.proto",
}
