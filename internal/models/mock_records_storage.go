// Code generated by MockGen. DO NOT EDIT.
// Source: internal/models/records.go

// Package models is a generated GoMock package.
package models

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRecordStorage is a mock of RecordStorage interface.
type MockRecordStorage struct {
	ctrl     *gomock.Controller
	recorder *MockRecordStorageMockRecorder
}

// MockRecordStorageMockRecorder is the mock recorder for MockRecordStorage.
type MockRecordStorageMockRecorder struct {
	mock *MockRecordStorage
}

// NewMockRecordStorage creates a new mock instance.
func NewMockRecordStorage(ctrl *gomock.Controller) *MockRecordStorage {
	mock := &MockRecordStorage{ctrl: ctrl}
	mock.recorder = &MockRecordStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRecordStorage) EXPECT() *MockRecordStorageMockRecorder {
	return m.recorder
}

// AddRecord mocks base method.
func (m *MockRecordStorage) AddRecord(ctx context.Context, userID string, record *RecordDTO) (*Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRecord", ctx, userID, record)
	ret0, _ := ret[0].(*Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddRecord indicates an expected call of AddRecord.
func (mr *MockRecordStorageMockRecorder) AddRecord(ctx, userID, record interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRecord", reflect.TypeOf((*MockRecordStorage)(nil).AddRecord), ctx, userID, record)
}

// DeleteRecord mocks base method.
func (m *MockRecordStorage) DeleteRecord(ctx context.Context, userID, recordID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRecord", ctx, userID, recordID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRecord indicates an expected call of DeleteRecord.
func (mr *MockRecordStorageMockRecorder) DeleteRecord(ctx, userID, recordID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRecord", reflect.TypeOf((*MockRecordStorage)(nil).DeleteRecord), ctx, userID, recordID)
}

// GetRecord mocks base method.
func (m *MockRecordStorage) GetRecord(ctx context.Context, userID, recordID string) (*Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecord", ctx, userID, recordID)
	ret0, _ := ret[0].(*Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecord indicates an expected call of GetRecord.
func (mr *MockRecordStorageMockRecorder) GetRecord(ctx, userID, recordID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecord", reflect.TypeOf((*MockRecordStorage)(nil).GetRecord), ctx, userID, recordID)
}

// ListRecords mocks base method.
func (m *MockRecordStorage) ListRecords(ctx context.Context, userID string, offset, limit int) ([]*Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRecords", ctx, userID, offset, limit)
	ret0, _ := ret[0].([]*Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRecords indicates an expected call of ListRecords.
func (mr *MockRecordStorageMockRecorder) ListRecords(ctx, userID, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRecords", reflect.TypeOf((*MockRecordStorage)(nil).ListRecords), ctx, userID, offset, limit)
}

// UpdateRecord mocks base method.
func (m *MockRecordStorage) UpdateRecord(ctx context.Context, userID string, record *Record) (*Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRecord", ctx, userID, record)
	ret0, _ := ret[0].(*Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRecord indicates an expected call of UpdateRecord.
func (mr *MockRecordStorageMockRecorder) UpdateRecord(ctx, userID, record interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRecord", reflect.TypeOf((*MockRecordStorage)(nil).UpdateRecord), ctx, userID, record)
}
